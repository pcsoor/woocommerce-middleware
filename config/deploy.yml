<% require "dotenv"; Dotenv.load(".env") %>

# Name of your application. Used to uniquely configure containers.
service: woocommerce_middleware

# Name of the container image.
image: petercsoor/woocommerce_middleware

# Deploy to these servers.
servers:
  web:
    hosts:
      - 142.132.160.54
    options:
      add-host:
        "pigmentvarazs.hu:2a00:c760:83:def:aced:fff0:0:4c2a"

deploy_timeout: 120  # 2 minutes to wait for container to become healthy
drain_timeout: 60


# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: pigmentvarazs.pcode.hu
  response_timeout: 120
  healthcheck:
    path: /up
    interval: 10      # Check every 10 seconds (less frequent)
    timeout: 30       # 30 seconds timeout for each healthcheck

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: petercsoor

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - SECRET_KEY_BASE
    - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY
    - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY
    - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT
  clear:
    RAILS_ENV: production
    SOLID_QUEUE_IN_PUMA: true
    DB_HOST: woocommerce_middleware-db

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "woocommerce_middleware_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: 3.2.2
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
 user: root
 keys: ['~/.ssh/dockerhub_mac']

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:17.0
    host: 142.132.160.54
    port: "127.0.0.1:5432:5432"
    options:
      network: "kamal"
      add-host:
        "pigmentvarazs.hu:2a00:c760:83:def:aced:fff0:0:4c2a"
    env:
      clear:
        POSTGRES_DB: woocommerce_middleware_production
      secret:
        - POSTGRES_PASSWORD
        - POSTGRES_USER
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
